# Main Logic Board Cloner [17 Digit]
# Version V2 by Hanger1
# Version V2.1 by Hanger1 & AGuyWhoIsBored
#Version V3 by Hanger1 & AGuyWhoIsBored
# Original credit to Hanger1
# ........More Acurate with Model Specific......
# Modified by AGuyWhoIsBored
# Changes by AGuy:
# [Dec 22 14] Changed / Revamped text coloring, as current method broken
# [Dec 22 14] Add "humanY", Human Friendly Year
# [Dec 22 14] Add S/N output to printed output
# [Dec 22 14] Changed / Revamped ROM / MAC Address collection, as current method broken / unknown
# [Dec 22 14] **NOTE** Need to figure out how to acquire actual current ROM value from system
# [Dec 22 14] Added checks to make sure EN0 Network Config / MAC Address / ROM is valid, probably unnecessary
# [Dec 22 14] Added Versioning Variable, Change every time a new commit / sets of commits are made
# [Dec 22 14] Cleaned up script's output
# [Dec 22 14] Added Info @ the end of the script to show how MLBwas calculated, can be disabled via a variable
# [Dec 22 14] Updated instructions on "Procedure to Activate"
# [Dec 22 14] Adding onscreen check to see if MAC Address and ROM match

# Version
version="3"

#Model Input....................................
#iMac ...............................................................................
iMac()
{ 
# EEEE Code......................................

declare -a code=('DYWF' 'F117' 'F502' 'F505' 'F9GY' 'F9H0' 'F9H1' 'F9H2' 'DYWD' 'F504' 'F116' 'F503' 'F2FR' 'F653' 'F49P' 'F651' 'F49R' 'F652' 'DYW3' 'F64V' 'F0V5' 'F64W' 'FF4G' 'FF4H' 'FF4J' 'FF4K' 'FF4L' 'FF4M' 'FF4N' 'FF4P' 'DNY3' 'DP00' 'DJWK' 'DM66' 'DNJK' 'DKG1' 'DM65' 'DNJJ' 'DKG2' 'DM67' 'DNJL' 'DJWM' 'DMT3' 'DMT5' 'DJWN' 'DM69' 'DJWP' 'DM6C')
index=$( jot -r 1  0 $((${#code[@]} - 1)) )
EEEE=${code[index]}
#echo $EEEE

# TTT Code (Board Serial)..................................
declare -a codee=('200' '600' '403' '404' '405' '303' '108' '207' '609' '501' '306' '102' '701' '301' '501' '101' '300' '130' '100' '270' '310' '902' '104' '401' '902' '500' '700' '802')
indexx=$( jot -r 1  0 $((${#codee[@]} - 1)) )
TTT=${codee[indexx]}
#echo "Board Serial / TTT code: $TTT"

}
#Mac Mini .............................................................................
MMini()
{ 
# EEEE Code......................................

declare -a code=('RAVF' 'REP7' 'S7NF' 'S7PY' 'UY26' 'VRX3' 'RDSR' 'REQV' 'RES0' 'S7Q1' 'S7R5' 'UY3G' 'VRYK' 'T6SL' 'TBSW')
index=$( jot -r 1  0 $((${#code[@]} - 1)) )
EEEE=${code[index]}
#echo $EEEE

# TTT Code (Board Serial)..................................
declare -a codee=('200' '600' '403' '404' '405' '303' '108' '207' '609' '501' '306' '102' '701' '301' '501' '101' '300' '130' '100' '270' '310' '902' '104' '401' '902' '500' '700' '802')
indexx=$( jot -r 1  0 $((${#codee[@]} - 1)) )
TTT=${codee[indexx]}
#echo "Board Serial / TTT code: $TTT"

}

#MacBook Pro.............................................................................
MBPro()
{ 
# EEEE Code......................................

declare -a code=('VHTF' 'VJFY' 'VVKV' 'VVN1' 'W36G' 'WB5K' 'WB6L' 'DD7H' 'DD7J' 'VHTJ' 'VJF4' 'VVK2' 'VVN3' 'W365' 'WB5R' 'WB6P' 'V6PM' 'VHU6N' 'VVL0' 'VVP6' 'W37R' 'WB3K' 'WB46')
index=$( jot -r 1  0 $((${#code[@]} - 1)) )
EEEE=${code[index]}
#echo $EEEE

# TTT Code (Board Serial)..................................
declare -a codee=('200' '600' '403' '404' '405' '303' '108' '207' '609' '501' '306' '102' '701' '301' '501' '101' '300' '130' '100' '270' '310' '902' '104' '401' '902' '500' '700' '802')
indexx=$( jot -r 1  0 $((${#codee[@]} - 1)) )
TTT=${codee[indexx]}
#echo "Board Serial / TTT code: $TTT"

}
#MacBook Air...............................................................................
MBAir()
{ 
# EEEE Code......................................

declare -a code=('XSC3' 'YMSK' 'ZU52' 'ZU6L' 'ZU7G' 'ZU8R' 'Z80J' 'Z81V' 'ZU9N' 'ZUAK' 'ZUB6' 'ZUC2' 'DK9L' 'DLCP' 'DLCT' 'DLCR' 'DLD1' 'DLD6' 'DCWV' 'DCWX' 'DCX4' 'DCXF')
index=$( jot -r 1  0 $((${#code[@]} - 1)) )
EEEE=${code[index]}
#echo $EEEE

# TTT Code (Board Serial)..................................
declare -a codee=('200' '600' '403' '404' '405' '303' '108' '207' '609' '501' '306' '102' '701' '301' '501' '101' '300' '130' '100' '270' '310' '902' '104' '401' '902' '500' '700' '802')
indexx=$( jot -r 1  0 $((${#codee[@]} - 1)) )
TTT=${codee[indexx]}
#echo "Board Serial / TTT code: $TTT"

}

#.............................................
# Getting Serial Number 
# Serial should be 13 digits if you want 17 digit MLB
SN=$(ioreg -l | awk '/IOPlatformSerialNumber/ { print $4;}' | cut -d'"' -f2)


# SSS Code (Location of Factory)......................................

SSS=$(ioreg -l | awk '/IOPlatformSerialNumber/ { print $4;}' | cut -d'"' -f2 | cut -c1-3)

#echo "Location of Factory: $SSS"
# Debug

# Week Number....................................
WeekF=$(ioreg -l | awk '/IOPlatformSerialNumber/ { print $4;}' | cut -d'"' -f2 | cut -c4-5)

SNUMBERA()
	{
	if [[ $WeekF = [ACFHKM]1 ]]; then
	    WeekNUM=1
	elif [[ $WeekF = [ACFHKM]2 ]]; then
		WeekNUM=2
	elif [[ $WeekF = [ACFHKM]3 ]]; then
		WeekNUM=3
	elif [[ $WeekF = [ACFHKM]4 ]]; then
		WeekNUM=4
	elif [[ $WeekF = [ACFHKM]5 ]]; then
		WeekNUM=5
	elif [[ $WeekF = [ACFHKM]6 ]]; then
		WeekNUM=6
	elif [[ $WeekF = [ACFHKM]7 ]]; then
		WeekNUM=7
	elif [[ $WeekF = [ACFHKM]8 ]]; then
		WeekNUM=8
	elif [[ $WeekF = [ACFHKM]9 ]]; then
		WeekNUM=9
	fi
	}
SNUMBERB()
	{
	if [[ $WeekF = [BDGJLN]1 ]]; then
		WeekNUM=27
	elif [[ $WeekF = [BDGJLN]2 ]]; then
		WeekNUM=28
	elif [[ $WeekF = [BDGJLN]3 ]]; then
		WeekNUM=29
	elif [[ $WeekF = [BDGJLN]4 ]]; then
		WeekNUM=30
	elif [[ $WeekF = [BDGJLN]5 ]]; then
		WeekNUM=31
	elif [[ $WeekF = [BDGJLN]6 ]]; then
		WeekNUM=32
	elif [[ $WeekF = [BDGJLN]7 ]]; then
		WeekNUM=33
	elif [[ $WeekF = [BDGJLN]8 ]]; then
		WeekNUM=34
	elif [[ $WeekF = [BDGJLN]9 ]]; then
		WeekNUM=35
	fi
	}
	
SWORDA()
	{
	if [[ $WeekF = [CFHKM]C ]]; then
		WeekNUM=10
	elif [[ $WeekF = [CFHKM]D ]]; then
		WeekNUM=11
	elif [[ $WeekF = [CFHKM]F ]]; then
		WeekNUM=12
	elif [[ $WeekF = [CFHKM]G ]]; then
		WeekNUM=13
	elif [[ $WeekF = [CFHKM]H ]]; then
		WeekNUM=14
	elif [[ $WeekF = [CFHKM]J ]]; then
		WeekNUM=15
	elif [[ $WeekF = [CFHKM]K ]]; then
		WeekNUM=16
	elif [[ $WeekF = [CFHKM]L ]]; then
		WeekNUM=17
	elif [[ $WeekF = [CFHKM]M ]]; then
		WeekNUM=18
	elif [[ $WeekF = [CFHKM]N ]]; then
		WeekNUM=19
	elif [[ $WeekF = [CFHKM]P ]]; then
		WeekNUM=20
	elif [[ $WeekF = [CFHKM]Q ]]; then
		WeekNUM=21
	elif [[ $WeekF = [CFHKM]R ]]; then
		WeekNUM=22
	elif [[ $WeekF = [CFHKM]T ]]; then
		WeekNUM=23
	elif [[ $WeekF = [CFHKM]V ]]; then
		WeekNUM=24
	elif [[ $WeekF = [CFHKM]W ]]; then
		WeekNUM=25
	elif [[ $WeekF = [CFHKM]X ]]; then
		WeekNUM=26
	elif [[ $WeekF = [CFHKM]Y ]]; then
		WeekNUM=27
	fi
	}

SWORDB()
	{
	if [[ $WeekF = [DGJLN]C ]]; then
		WeekNUM=36
	elif [[ $WeekF = [DGJLN]D ]]; then
		WeekNUM=37
	elif [[ $WeekF = [DGJLN]F ]]; then
		WeekNUM=38
	elif [[ $WeekF = [DGJLN]G ]]; then
		WeekNUM=39
	elif [[ $WeekF = [DGJLN]H ]]; then
		WeekNUM=40
	elif [[ $WeekF = [DGJLN]J ]]; then
		WeekNUM=41
	elif [[ $WeekF = [DGJLN]K ]]; then
		WeekNUM=42
	elif [[ $WeekF = [DGJLN]L ]]; then
		WeekNUM=43
	elif [[ $WeekF = [DGJLN]M ]]; then
		WeekNUM=44
	elif [[ $WeekF = [DGJLN]N ]]; then
		WeekNUM=45
	elif [[ $WeekF = [DGJLN]P ]]; then
		WeekNUM=46
	elif [[ $WeekF = [DGJLN]Q ]]; then
		WeekNUM=47
	elif [[ $WeekF = [DGJLN]R ]]; then
		WeekNUM=48
	elif [[ $WeekF = [DGJLN]T ]]; then
		WeekNUM=49
	elif [[ $WeekF = [DGJLN]V ]]; then
		WeekNUM=50
	elif [[ $WeekF = [DGJLN]W ]]; then
		WeekNUM=51
	elif [[ $WeekF = [DGJLN]X ]]; then
		WeekNUM=52
	elif [[ $WeekF = [DGJLN]Y ]]; then
		WeekNUM=53
	fi
	}


SEARCHN()
{
if [[ $WeekF = [ACFHKM][1-9] ]]; then
    #echo "'$WeekF' 1 - 9"
	SNUMBERA
	#echo $WeekNUM
elif [[ $WeekF = [PQRSTVWXYZEIOU][1-9] ]]; then
	echo "'$WeekF' NULL"
	echo "Serial is Incorrect"
	exit 1
elif [[ $WeekF = [A-Z]0 ]]; then
	echo "'$WeekF' NULL"
	echo "Serial is Incorrect"
	exit 
else
    #echo "'$WeekF' 27 - 35"
	SNUMBERB
	#echo $WeekNUM
fi
}

SEARCHW()
{
if [[ $WeekF = [CFHKM][CDFGHJKLMNPU] ]]; then
    #echo "'$WeekF' 10 - 27"
	SWORDA
	#echo $WeekNUM
elif [[ $WeekF = [ABPQRSTVWXYZEIOU]* ]]; then
	echo "'$WeekF' NULL"
	echo "Serial is Incorrect"
	exit 1
elif [[ $WeekF = [CFHKM][ABEIOSUZ] ]]; then
	echo "'$WeekF' NULL"
	echo "Serial is Incorrect"
	exit 1
elif [[ $WeekF = [DGJLN][ABEIOSUZ] ]]; then
	echo "'$WeekF' NULL"
	echo "Serial is Incorrect"
	exit 1
elif [[ $WeekF = [DGJLN][CDFGHJKLMNPQRSTVWXY] ]]; then
    #echo "'$WeekF' 36 - 53"
	SWORDB
	#echo $WeekNUM	
fi
}

if [[ $WeekF == [A-Z]*[0-9] ]] ; then
	SEARCHN
else
	SEARCHW
fi
#echo "Week Number Computer Made: $WeekNU"
# Debug


# Manufacturing Year........................

ModelY=$(curl -s http://support-sp.apple.com/sp/product?cc=`ioreg -l|grep IOPlatformSerialNumber|awk '/Serial/ {print $4}'| sed -e 's|"||g'|cut -c 9-`|sed 's|.*<configCode>\(.*\)</configCode>.*|\1|' | tail -c 3 | cut -c1-1)
#echo "Manufacturing Year: $ModelY"
# Debug

# Calculates the human friendly year based off of the Manufacturing Year 
humanY="-1" #Uninitalized
if [ "$ModelY" = "6" ] ; then
    humanY="2006"
elif [ "$ModelY" = "7" ] ; then
    humanY="2007"
elif [ "$ModelY" = "8" ] ; then
    humanY="2008"
elif [ "$ModelY" = "9" ] ; then
    humanY="2009"
elif [ "$ModelY" = "0" ] ; then #Not sure about this one...
    humanY="2010"
elif [ "$ModelY" = "1" ] ; then
    humanY="2011"
elif [ "$ModelY" = "2" ] ; then
    humanY="2012"
elif [ "$ModelY" = "3" ] ; then
    humanY="2013"
elif [ "$ModelY" = "4" ] ; then
    humanY="2014"
elif [ "$ModelY" = "5" ] ; then
    humanY="2015"
fi
#Years after this need to be calculated differently or the numbers need to be recycled
#echo "Manufacturing Year (Friendly): $humanY" [Debug]

# Last KK Code (Ending code)..............................

declare -a codeee=('1H' '1M' 'AD' '1F' 'A8' 'UE' 'JA' 'JC' '8C' 'CB' 'FB')
indexxx=$( jot -r 1  0 $((${#codeee[@]} - 1)) )
KK=${codeee[indexxx]}
#echo $KK

# CC Code................................
# Sill cant find the method for CC code #
declare -a codeeee=('GU' '4N' 'J9' 'QX' 'OP' 'CD' 'GU')
indexxxx=$( jot -r 1  0 $((${#codeeee[@]} - 1)) )
CC=${codeee[indexxxx]}


#echo $CC

# MLB.....................................

MLB=$(echo "$SSS$ModelY$WeekNUM$TTT$CC$EEEE$KK")
#echo $MLB
#.......................................

# ROM ** Its need internet connection
# Only acquires MAC Address, so not ROM, and doesn't work, revamping 
#ROM=$(/usr/local/bin/bdmesg | awk '/MAC \address/ { print $8;}' | sed 's/://g' | tr '[:upper:]' '[:lower:]')

# Probably useless, but variable to be toggled when MAC Address is invalid (empty string) AKA when en0 is not present, which is required to get iMessage working. 
MACAddrInvalid="0"

# MAC Address collection 
MACAddr=$(ifconfig en0 | awk '/ether/' | cut -c8-24 | sed 's/://g')
#MACAddr="" [Debug]
if [ "$MACAddr" = "" ]; then
    MACAddrInvalid="1"
fi

# Simple check to make sure en0 network config exists 
EN0Invalid="0"
EN0Check=$(ifconfig en0)
#EN0Check="" [Debug]
if [ "$EN0Check" = "" ]; then
    EN0Invalid="1"
fi

# ROM

# Need to figure out how to acquire ROM value
ROMInvalid="0"
ROM=$(ioreg -l -p IODeviceTree | awk '/system-id/ {print $4}' | head -n 1 | cut -c 22-33) #ROM Thanks To Onixs
#ROM="" [Debug]
if [ "$ROM" = "" ]; then
    ROMInvalid="1"
fi

# When ROM becomes invalid set their value to Unknown for better appearance 

if [ "$ROMInvalid" = "1" ]; then
    ROM="--Unknown---"
fi
#==============================================================================================
# Color Selection

# Foreground / Colors
# Light Colors
LBlack='\e[30m'
LRed='\e[31m'
LGreen='\e[32m'
LYellow='\e[33m'
LBlue='\e[34m'
LPurple='\e[35m'
LCyan='\e[36m'
LWhite='\e[37m'

# Dark Colors
DBlack='\e[1;30m'
DRed='\e[1;31m'
DGreen='\e[1;32m'
DYellow='\e[1;33m'
DBlue='\e[1;34m'
DPurple='\e[1;35m'
DCyan='\e[1;36m'
DWhite='\e[1;37m'


# Background / High Intensity Colors
IBlack='\e[7;30m'   # Black
IRed='\e[7;31m'     # Red
IGreen='\e[7;32m'   # Green
IYellow='\e[7;33m'  # Yellow
IBlue='\e[7;34m'    # Blue
IPurple='\e[7;35m'  # Purple
ICyan='\e[7;36m'    # Cyan
IWhite='\e[7;37m'   # White

NC='\e[m' # No Color / Reset

# Toggle breakdown of MLB at the end of the script

printf "${DPurple}::Please Type Model :: \n"
echo "---------------------- "
echo "iM For iMac"
echo "MM For Mac Mini"
echo "MBP For Macbook Pro"
echo "MBA For Macbook Air"
printf "${NC}"

echo 
read input
case "$input" in
        iM)
            clear
            iMac
            ;;

        MM)  
            clear
            MMini
            ;;
            
        MBP)  
            clear
            MBPro
            ;;
        MBA)  
            clear
            MBAir
            ;;
            
        *)
            echo
            printf "${DRed}$entry is Invalid Argument${NC}"
            echo
            exit 1

esac

# User InterFace
# Broken, will revamp / change so that it works properly 

# Script Output
# ASCI color escape sequences could be opti mized / improved
printf "${LCyan}"
echo "           --------------------------"
echo "          | MLB Generator (13 Char)  |"
echo "           --------------------------"
printf ${IYellow}""
echo "----------------Current Version: $version-------------"
echo "(Developer / Creator: Hanger1) © By Hanger1  V3"
printf ${NC}""
echo " _____________________________"
echo "|                             |"
printf "|${LGreen}  S/N::${NC} $SN         |"
echo ""
echo "|                             |"
printf "${LGreen}"
echo "|  MLB:: $SSS$ModelY$WeekNUM$TTT$EEEE        |"
printf "${NC}"
echo "|                             |"
printf "|${LGreen}  MAC::${NC} $MACAddr         |"
printf "\n"
echo "|                             |"
printf "|       ${DRed}Your Current ROM${NC}      |"
printf "\n"
printf "|        ${DRed}$ROM${NC}         |"
printf "\n"
printf " -----------------------------"

# Adding in the warnings / errors when MAC Address / EN0 become invalid
echo ""
if [ "$MACAddrInvalid" = "1" ]; then
echo ""
printf "${DRed} **WARNING: Your MAC Address is invalid! :WARNING**"
fi
printf ${NC}""
if [ "$EN0Invalid" = "1" ]; then
echo ""
printf "${DRed} **FATAL WARNING: Your EN0 Network Config is invalid! :FATAL WARNING**"
fi
printf ${NC}""
if [ "$ROMInvalid" = "1" ]; then
echo ""
printf "${DRed} **WARNING: Your ROM value is invalid! :WARNING**"
fi
printf ${NC}""
echo ""
# End warnings / errors for MAC Address / EN0

# Break Down of MLB
if [ "$breakDown" = "1" ]; then
echo ""
printf ${IYellow}""
echo "----MLB Breakdown----"
echo "$SSS $ModelY $WeekNUM $TTT $CC $EEEE $KK"
printf ${NC}""
printf ${LPurple}""
echo
echo "Production Location: $SSS (This should match S/N)"
echo "Year Computer Made: $ModelY"
echo "Year Computer Made (Human Friendly): $humanY"
echo "Week Computer Made: $WeekNUM (Should be between 1 and 52)"
echo "Board Serial / TTT code: $TTT"
echo "CC code: $CC"
echo "EEEE code: $EEEE"
echo "KK code: $KK"
echo
echo
fi


# These instructions are repeats of calculating modelY when you have it calculated automatically already?
printf "${LRed}"
echo "::Without Internet Connection Add Model Year Number In place of # in MLB::"
echo "  (like 2013  then # is 03)"
echo ""
printf ${NC}""
exit
#=====================================================================================================